{
  "name": "Sellect Developer Kit",
  "tagline": "",
  "body": "## Table of Contents\r\n\r\n1. [First Time Setup](#first-time-setup)\r\n2. [Repeat Use](#repeat-use)\r\n3. [Common Issues](#common-issues)\r\n4. [Development Workflow](#development-workflow)\r\n5. [Report Issue or Ask a Question](https://github.com/sellect/dev-kit/issues/new)\r\n\r\n## First Time Setup\r\n\r\n1. [Download](https://www.vagrantup.com/downloads.html) and install Vagrant\r\n2. [Download](https://www.virtualbox.org/wiki/Downloads) and install VirtualBox\r\n3. Download the dev kit\r\n4. [Add](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/) ssh key provided with dev kit into your github user\r\n5. Run these commands in the dev kit directory:\r\n```\r\n$ vagrant up --provider=docker\r\n```\r\nThis will take some time the first time you run this command since the vagrant virtual machine(VM) is being created.\r\n\r\nSometimes you may run into errors. See common issues [below](#common-issues).\r\n\r\nOnce the virtual machine is successfully built, run this command:\r\n```\r\n$ vagrant ssh\r\n```\r\nThe output from this command should look something like this:\r\n```\r\n==> default: SSH will be proxied through the Docker virtual machine since we're\r\n==> default: not running Docker natively. This is just a notice, and not an error.\r\nWarning: Permanently added '172.17.0.2' (ECDSA) to the list of known hosts.\r\nWelcome to Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-85-generic x86_64)\r\n\r\n * Documentation:  https://help.ubuntu.com/\r\nLast login: Tue Apr 19 20:54:37 2016 from 172.17.0.1\r\nvagrant@925303b734df:~/dev-kit$\r\n```\r\n\r\nYou are now ssh'd into the vagrant VM. Run the following command to start the application:\r\n```\r\nvagrant@925303b734df:~/dev-kit$ ./run\r\n```\r\n\r\nThis may take a little while as the bundle is installed and database is synced.\r\n\r\nIf all goes well you should see something like this at the bottom of the output:\r\n```\r\n=> Booting Thin\r\n=> Rails 4.2.6 application starting in development on http://localhost:3000\r\n=> Run `rails server -h` for more startup options\r\n=> Ctrl-C to shutdown server\r\nThin web server (v1.6.3 codename Protein Powder)\r\nMaximum connections set to 1024\r\nListening on localhost:3000, CTRL+C to stop\r\n```\r\n\r\nThis means your rails server is running and you can browse the website at [http://localhost:3000](http://localhost:3000) in your browser.\r\n\r\nThe webserver is running from a shared directory in your dev kit on your local machine. Any updates inside `/path/to/your/devkit/web` should be reflected upon refresh of your browser window.\r\n\r\n## Repeat Use\r\n\r\n1. Change directory to the directory of the devkit\r\n2. Run either `vagrant up --provider=docker` or `vagrant reload` if the VM is already running\r\n3. Done\r\n\r\n## Common Issues\r\n\r\n```\r\nA Docker command executed by Vagrant didn't complete successfully!\r\nThe command run along with the output from the command is shown\r\nbelow.\r\n\r\nCommand: \"docker\" \"ps\" \"-a\" \"-q\" \"--no-trunc\"\r\n\r\nStderr: Cannot connect to the Docker daemon. Is the docker daemon running on this host?\r\n\r\nStdout:\r\n```\r\n**solution**\r\n\r\nJust rerun the previous command and the build should continue.\r\n\r\n```\r\nThe Docker provider was able to bring up the host VM successfully\r\nbut the host VM is still reporting that SSH is unavailable. This\r\nsometimes happens with certain providers due to bugs in the\r\nunderlying hypervisor, and can be fixed with a `vagrant reload`.\r\nThe ID for the host VM is shown below for convenience.\r\n\r\nIf this does not fix it, please verify that the host VM provider\r\nis functional and properly configured.\r\n\r\nHost VM ID: 4541a04b-1d6b-40e2-932a-5b10381582fe\r\n```\r\n**solution**\r\n\r\n```\r\n$ mv ~/.vagrant.d/insecure_private_key ~/Desktop/.\r\n```\r\nThis moves your `insecure_private_key` for vagrant to your desktop for backup puroposes. This will force vagrant to regenerate a new `insecure_private_key`. If you successfully run vagrant you can remove the old key from your desktop.\r\n\r\n## Development Workflow\r\n\r\nAt Sellect we like to use [Git Flow](https://github.com/nvie/gitflow) which provides a simple mechanism for creating organized branches based on the type of update being developed. If you are not familiar with Git Flow then the idea should always be to create a new branch based off of `develop` with a name indicative of what the branch aims to acheive. Once you create a branch, you should then create a pull request from your newly created branch to the `develop` branch. Once you create this pull request your work will be reviewed for code quality and will be deployed to the beta environment upon approval.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}